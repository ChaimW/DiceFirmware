#pragma once

#include "core/float3.h"
#include "stdint.h"

namespace Config
{
    namespace DiceVariants
    {
        // This enum describes what the dice looks like, so the App can use the appropriate 3D model/color
        enum DesignAndColor : uint8_t
        {
            DesignAndColor_Unknown = 0,
            DesignAndColor_Generic,
            DesignAndColor_V3_Orange,
            DesignAndColor_V4_BlackClear,
            DesignAndColor_V4_WhiteClear,
            DesignAndColor_V5_Grey,
            DesignAndColor_V5_White,
            DesignAndColor_V5_Black,
            DesignAndColor_V5_Gold,
            DesignAndColor_Onyx_Back,
            DesignAndColor_Hematite_Grey,
            DesignAndColor_Midnight_Galaxy,
            DesignAndColor_Aurora_Sky
        };

        const uint8_t sixSidedRemap[] = {
            // FIXME!!!
            0, 1, 2, 3, 4, 5,
            1, 2, 3, 4, 5, 0,
            2, 3, 4, 5, 0, 1,
            3, 4, 5, 0, 1, 2,
            4, 5, 0, 1, 2, 3, 
            5, 0, 1, 2, 3, 4, 
        };

        const Core::float3 sixSidedNormals[] = {
            { 0, -1,  0},
            { 0,  0,  1},
            { 1,  0,  0},
            {-1,  0,  0},
            { 0,  0, -1},
            { 0,  1,  0}
        };

        const uint8_t sixSidedFaceToLedLookup[] = {
            1, 4, 0, 3, 2, 5,
        };

        const uint8_t twentySidedRemap[] = {
            19,	18,	11,	10,	5,	4,	7,	6,	17,	16,	3,	2,	13,	12,	15,	14,	9,	8,	1,	0,
            18,	11,	5,	4,	6,	3,	2,	19,	10,	7,	12,	9,	0,	17,	16,	13,	15,	14,	8,	1,
            17,	15,	14,	8,	13,	0,	1,	16,	12,	9,	10,	7,	3,	18,	19,	6,	11,	5,	4,	2,
            16,	17,	15,	12,	14,	8,	9,	13,	18,	19,	0,	1,	6,	10,	11,	5,	7,	4,	2,	3,
            15,	14,	13,	0,	16,	10,	7,	17,	8,	1,	18,	11,	2,	12,	9,	3,	19,	6,	5,	4,
            14,	15,	12,	19,	9,	3,	6,	8,	17,	18,	1,	2,	11,	13,	16,	10,	0,	7,	4,	5,
            13,	16,	17,	18,	15,	12,	19,	14,	10,	11,	8,	9,	5,	0,	7,	4,	1,	2,	3,	6,
            12,	19,	6,	5,	3,	2,	4,	9,	18,	11,	8,	1,	10,	15,	17,	16,	14,	13,	0,	7,
            11,	5,	6,	3,	19,	12,	9,	18,	4,	2,	17,	15,	1,	10,	7,	0,	16,	13,	14,	8,
            10,	11,	18,	19,	17,	15,	12,	16,	5,	6,	13,	14,	3,	7,	4,	2,	0,	1,	8,	9,
            9,	12,	19,	18,	6,	5,	11,	3,	15,	17,	2,	4,	16,	8,	14,	13,	1,	0,	7,	10,
            8,	14,	15,	17,	12,	19,	18,	9,	13,	16,	3,	6,	10,	1,	0,	7,	2,	4,	5,	11,
            7,	0,	1,	8,	2,	3,	9,	4,	13,	14,	5,	6,	15,	10,	16,	17,	11,	18,	19,	12,
            6,	3,	9,	8,	12,	15,	14,	19,	2,	1,	18,	17,	0,	5,	4,	7,	11,	10,	16,	13,
            5,	6,	19,	12,	18,	17,	15,	11,	3,	9,	10,	16,	8,	4,	2,	1,	7,	0,	13,	14,
            4,	7,	0,	13,	1,	8,	14,	2,	10,	16,	3,	9,	17,	5,	11,	18,	6,	19,	12,	15,
            3,	9,	12,	15,	19,	18,	17,	6,	8,	14,	5,	11,	13,	2,	1,	0,	4,	7,	10,	16,
            2,	4,	7,	10,	0,	13,	16,	1,	5,	11,	8,	14,	18,	3,	6,	19,	9,	12,	15,	17,
            1,	2,	4,	5,	7,	10,	11,	0,	3,	6,	13,	16,	19,	8,	9,	12,	14,	15,	17,	18,
            0,	1,	2,	3,	4,	5,	6,	7,	8,	9,	10,	11,	12,	13,	14,	15,	16,	17,	18,	19,
        };

        const uint8_t twentySidedFaceToLedLookup[] = {
        //   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  // Face number (face index+1)
        //   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  // Face index
             9,  5, 18,  3,  0, 12,  8, 15, 11, 16,  2,  6,  1, 13,  7, 19, 17,  4, 10, 14
        // Old Molds:
        //   9, 13,  7, 19, 11, 16,  1,  5, 17,  4, 18,  3, 10, 15,  2,  6,  0, 12,  8, 14
        };

        // LED number
        //  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
        //  4, 12, 10,  3, 17,  1, 11, 14,  6,  0, 18,  8,  5, 13, 19,  7,  9, 16,  2, 15

        const Core::float3 twentySidedNormals[] = {
            {-0.1273862f,  0.3333025f,  0.9341605f},
            { 0.7453963f, -0.3333219f, -0.5773357f},
            {-0.8726854f, -0.3333218f,  0.3568645f},
            { 0.3333614f,  0.7453930f, -0.5774010f},
            { 0.8726999f,  0.3333025f,  0.3567604f},
            {-0.7453431f,  0.3333741f, -0.5773722f},
            { 0.1273475f, -0.3333741f,  0.9341723f},
            {-0.3333083f, -0.7453408f, -0.5773069f},
            {-0.6667246f,  0.7453931f, -0.0000000f},
            { 0.0000000f, -1.0000000f, -0.0000000f},
            { 0.0000000f,  1.0000000f, -0.0000000f},
            { 0.6667246f, -0.7453931f, -0.0000000f},
            { 0.3333083f,  0.7453408f,  0.5773069f},
            {-0.1273475f,  0.3333741f, -0.9341723f},
            { 0.7453431f, -0.3333741f,  0.5773722f},
            {-0.8726999f, -0.3333025f, -0.3567604f},
            {-0.3331230f, -0.7450288f,  0.5778139f},
            { 0.8726854f,  0.3333218f, -0.3568645f},
            {-0.7453963f,  0.3333219f,  0.5773357f},
            { 0.1273862f, -0.3333025f, -0.9341605f},
        };


        struct Layout
        {
            const Core::float3* baseNormals;
            const uint8_t* faceRemap;
            const uint8_t* faceToLedLookup;
        };
    }
}